# main.py

import logging
from telegram import Update
from config import TELEGRAM_BOT_TOKEN
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_FOR_SECOND_PLAYER, WAITING_FOR_WORD = range(2)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä
games = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username
user_chat_ids = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.message.from_user
    username = user.username
    chat_id = update.message.chat_id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if username:
        user_chat_ids[username] = chat_id
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∏–≥—Ä–∞ –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å—Ç–∏–ª–µ Wordle.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /new_game, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É."
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏ username –≤ Telegram, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
        )


async def new_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /new_game –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
    user = update.message.from_user
    username = user.username
    if not username:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏ username –≤ Telegram, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å @username –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å."
    )
    return WAITING_FOR_SECOND_PLAYER


async def set_player(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    second_player = update.message.text.strip()
    if not second_player.startswith('@'):
        second_player = '@' + second_player  # –î–æ–±–∞–≤–ª—è–µ–º '@' –≤ –Ω–∞—á–∞–ª–æ
    second_player_username = second_player[1:]  # –£–±–∏—Ä–∞–µ–º '@'

    if second_player_username not in user_chat_ids:
        await update.message.reply_text(
            f"–ò–≥—Ä–æ–∫ {second_player} –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º. –ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É."
        )
        return WAITING_FOR_SECOND_PLAYER

    word_setter_username = update.message.from_user.username
    word_setter_chat_id = update.message.chat_id
    context.user_data['word_setter_username'] = word_setter_username
    context.user_data['guesser_username'] = second_player_username

    guesser_chat_id = user_chat_ids[second_player_username]

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    games[(word_setter_username, second_player_username)] = {
        'state': 'waiting_for_word',
        'secret_word': '',
        'attempts': [],
        'word_setter_chat_id': word_setter_chat_id,
        'guesser_chat_id': guesser_chat_id
    }

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, {word_setter_username}, –∑–∞–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤."
    )
    return WAITING_FOR_WORD


async def receive_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
    word = update.message.text.strip().lower()
    if len(word) != 5 or not word.isalpha():
        await update.message.reply_text("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return WAITING_FOR_WORD

    word_setter_username = context.user_data['word_setter_username']
    guesser_username = context.user_data['guesser_username']
    game = games.get((word_setter_username, guesser_username))

    if game and game['state'] == 'waiting_for_word':
        game['secret_word'] = word
        game['state'] = 'waiting_for_guess'
        await update.message.reply_text("–°–ª–æ–≤–æ –∑–∞–≥–∞–¥–∞–Ω–æ!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≥–∞–¥—ã–≤–∞—é—â–µ–º—É
        guesser_chat_id = game['guesser_chat_id']
        await context.bot.send_message(
            chat_id=guesser_chat_id,
            text=f"{word_setter_username} –∑–∞–≥–∞–¥–∞–ª(–∞) —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å –µ–≥–æ!"
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        return ConversationHandler.END


def get_feedback(secret_word, guess):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –¥–æ–≥–∞–¥–∫–µ"""
    feedback = ""
    result = ""
    for s_char, g_char in zip(secret_word, guess):
        if g_char == s_char:
            feedback += f"üü©"
        elif g_char in secret_word:
            feedback += f"üü®"
        else:
            feedback += f"‚¨ú"
        result += g_char.upper()
    return result, feedback


async def guess_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–≥–∞–¥–æ–∫ –∏–≥—Ä–æ–∫–∞"""
    guesser_username = update.message.from_user.username
    message = update.message.text.strip().lower()
    if len(message) != 5 or not message.isalpha():
        await update.message.reply_text("–î–æ–≥–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 –±—É–∫–≤.")
        return

    # –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã
    game = None
    word_setter_username = None
    for (w_s_username, g_username), g in games.items():
        if g_username == guesser_username and g['state'] == 'waiting_for_guess':
            game = g
            word_setter_username = w_s_username
            break

    if not game:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new_game.")
        return

    secret_word = game['secret_word']
    result, feedback = get_feedback(secret_word, message)
    game['attempts'].append((result, feedback))

    attempt_number = len(game['attempts'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –∏ –Ω–æ–º–µ—Ä–æ–º
    attempt_text = f"–ü–æ–ø—ã—Ç–∫–∞ {attempt_number}:\n{result}\n{feedback}"

    await update.message.reply_text(attempt_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–≥–∞–¥–∞–≤—à–µ–º—É –∏–≥—Ä–æ–∫—É —Å –ø—Ä–∏–ø–∏—Å–∫–æ–π
    word_setter_chat_id = game['word_setter_chat_id']
    await context.bot.send_message(
        chat_id=word_setter_chat_id,
        text=f"–ò–≥—Ä–æ–∫ {guesser_username} —Å–¥–µ–ª–∞–ª –ø–æ–ø—ã—Ç–∫—É {attempt_number}:\n{result}\n{feedback}"
    )

    if message == secret_word:
        await update.message.reply_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ! üéâ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥–∞–¥—ã–≤–∞—é—â–µ–º—É
        await context.bot.send_message(
            chat_id=word_setter_chat_id,
            text=f"–ò–≥—Ä–æ–∫ {guesser_username} —É–≥–∞–¥–∞–ª –≤–∞—à–µ —Å–ª–æ–≤–æ!"
        )

        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        del games[(word_setter_username, guesser_username)]
    else:
        if attempt_number >= 6:
            await update.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í—ã –Ω–µ —Å–º–æ–≥–ª–∏ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ '{secret_word.upper()}'.")
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–∞–¥–∞–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            await context.bot.send_message(
                chat_id=word_setter_chat_id,
                text=f"–ò–≥—Ä–æ–∫ {guesser_username} –Ω–µ —Å–º–æ–≥ —É–≥–∞–¥–∞—Ç—å –≤–∞—à–µ —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫."
            )
            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
            del games[(word_setter_username, guesser_username)]
        else:
            remaining_attempts = 6 - attempt_number
            await update.message.reply_text(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã"""
    await update.message.reply_text("–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
    return ConversationHandler.END


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('new_game', new_game)],
        states={
            WAITING_FOR_SECOND_PLAYER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_player)],
            WAITING_FOR_WORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_word)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–≥–∞–¥–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, guess_word))

    application.run_polling()


if __name__ == '__main__':
    main()
